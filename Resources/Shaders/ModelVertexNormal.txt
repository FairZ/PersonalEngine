#version 430 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 texCoord;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform mat4 lightMat;

out vec4 fragmentEyePosition_vertex;
out vec2 texCoord_vertex;
out mat3 TBNMatrix;
out vec4 fragmentLightPosition_vertex;

void main()
{
	gl_Position = projMat * viewMat * modelMat * vec4(position,1.0f);
	fragmentEyePosition_vertex = viewMat * modelMat * vec4(position,1.0f);
	
	vec3 tangent_vertex = normalize(vec3(viewMat * modelMat * vec4(tangent,1.0f)));
	vec3 bitangent_vertex = normalize(vec3(viewMat * modelMat * vec4(bitangent,1.0f)));
	vec3 normal_vertex =  normalize(vec3(viewMat * modelMat * vec4(normal,1.0f)));
	
	// TBN must form a right handed coord system.
    // Some models have symetric UVs. Check and fix.
    if (dot(cross(normal_vertex, tangent_vertex), bitangent_vertex) < 0.0)
	{
		tangent_vertex = tangent_vertex * -1.0;
	}
	TBNMatrix = mat3(tangent_vertex,bitangent_vertex,normal_vertex);

	texCoord_vertex = texCoord;
	
	fragmentLightPosition_vertex = lightMat * modelMat * vec4(position,1.0f);
}