#version 430 core
in vec4 vertexWorldPosition_vertex;
in vec2 texCoord_vertex;
in mat3 TBNMatrix;


uniform vec3 lightColour = {1.0f,0.6f,0.6f};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.2f,0.2f,0.2f};
uniform vec3 diffuseColour  = {1.0f,1.0f,1.0f};
uniform float alpha         = 1.0f;
uniform vec4 worldSpaceLightPosition = {0,1,0,1};
uniform mat4 viewMat;

uniform sampler2D colourTexture;
uniform sampler2D normalTexture;

out vec4 fragColour;

void main()
{
	vec3 toLight = worldSpaceLightPosition.xyz - vertexWorldPosition_vertex.xyz;

	vec3 normal = texture(normalTexture, texCoord_vertex).rgb;
	normal = normalize(normal * 2.0 - 1.0);
	normal = normalize(TBNMatrix * normal);

	float lightDistanceSquared = pow(toLight.x,2) + pow(toLight.y,2) + pow(toLight.z,2);
	float lightPower = 2;

	vec3 texColour = vec3(texture(colourTexture,texCoord_vertex));
	vec3 diffuse = diffuseColour * lightColour * max( dot(normal, normalize(toLight)), 0)  / (lightDistanceSquared/lightPower);

	fragColour = vec4( emissiveColour + texColour*(ambientColour + diffuse), alpha);
	
	//TODO: add these as a post-process effect
	//HDR: fragColour.rgb = fragColour.rgb / (fragColour.rgb+vec3(1.0f));
	//GAMMA: fragColour.rgb = pow(fragColour.rgb,vec3(1/2.2f));
}

